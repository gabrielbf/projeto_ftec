// Code generated by mockery v2.12.1. DO NOT EDIT.

package sample

import (
	context "context"

	entity "github.com/ftec-project/internal/infra/database/entity"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, sample
func (_m *Repository) Create(ctx context.Context, sample *entity.Sample) error {
	ret := _m.Called(ctx, sample)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Sample) error); ok {
		r0 = rf(ctx, sample)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByReferenceUUID provides a mock function with given fields: ctx, sample, reference
func (_m *Repository) GetByReferenceUUID(ctx context.Context, sample *entity.Sample, reference string) error {
	ret := _m.Called(ctx, sample, reference)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Sample, string) error); ok {
		r0 = rf(ctx, sample, reference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, sample
func (_m *Repository) Update(ctx context.Context, sample *entity.Sample) error {
	ret := _m.Called(ctx, sample)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Sample) error); ok {
		r0 = rf(ctx, sample)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
